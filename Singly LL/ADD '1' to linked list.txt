
class Solution
{
    public static int length(Node head)
    {
        Node curr=head;
        int c=0;
        while(curr!=null)
        {
            curr=curr.next;
            c++;
        }
        return c;
    }
    
    public static Node reverse(Node p)
    {
        if(p.next==null)
        {
            Node head=p;
            return head;
        }
        Node head=reverse(p.next);
        Node q=p.next;
        q.next=p;
        p.next=null;
        return head;
    }
    
    public static Node addNode(Node head,int d)
    {
        Node curr=head;
        while(curr.next!=null)
        {
            curr=curr.next;
        }
        while(d!=0)
        {
            curr.next=new Node(0);
            curr=curr.next;
            d--;
        }
        return head;
    }
    public static Node addOne(Node head) 
    { 
        int l=length(head);
        int diff=l-1;
        
        Node head2=new Node(1);
        head2=addNode(head2,diff);
        
        // reverse the main list
        head=reverse(head);
        
        // assign pointers to both LL
        Node prev=head;
        Node curr=head2;
        
        // create new LL(result)
        Node head3=null;
        Node tail=head3;
        
        int add,carry=0,div=0,rem=0;
        // adding both LL data where both list are in reverse order
        while(curr!=null && prev!=null)
        {
            add=prev.data+curr.data+carry;
            div=add/10;
            rem=add%10;
            carry=div;
            
            if(carry==0)
            {
                if(head3==null)
                {
                    head3=new Node(add);
                    tail=head3;
                }
                else
                {
                    tail.next=new Node(add);
                    tail=tail.next;
                }
            }
            else
            {
                if(head3==null)
                {
                    head3=new Node(rem);
                    tail=head3;
                }
                else
                {
                    tail.next=new Node(rem);
                    tail=tail.next;
                }
            }
            prev=prev.next;
            curr=curr.next;
        }
        if(carry!=0)
        tail.next=new Node(carry);
        
        head3=reverse(head3);
        return head3;
        //code here.
    }
}