class Intersect
{
    int length(Node head)
    {
        int count=0;
        Node curr=head;
        while(curr!=null)
        {
            curr=curr.next;
            count++;
        }
        return count;
    }
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
	    int l1=length(head1);
	    int l2=length(head2);
	    int diff=Math.abs(l1-l2);
	    if(l1<=l2)
	    {
	        int c=0;
	        Node prev=head1;
	        Node curr=head2;
	        l2=l1;
	        while(c!=diff)
	        {
	            curr=curr.next;
	            c++;
	        }
	        while(curr!=prev)
	        {
	            curr=curr.next;
	            prev=prev.next;
	        }
	        return curr.data;
	        
	       // else
	       // return -1;
	       // while(curr!=null && prev!=null)
	       // {
	       //     if(curr.next.data==prev.next.data)
	       //     return curr.next.data;
	            
	       //     curr=curr.next;
	       //     prev=prev.next;
	       // }
	    }
	    else
	    {
	        int c=0;
	        Node prev=head2;
	        Node curr=head1;
	        l1=l2;
	        while(c!=diff)
	        {
	            curr=curr.next;
	            c++;
	        }
	        
	       while(curr!=prev)
	       {
	           curr=curr.next;
	           prev=prev.next;
	       }
	       return curr.data;
	       // while(curr!=null && prev!=null)
	       // {
	       //     if(curr.next.data==prev.next.data)
	       //     return curr.next.data;
	            
	       //     curr=curr.next;
	       //     prev=prev.next;
	       // }
	    }
	}
}