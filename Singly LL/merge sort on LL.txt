class Solution
{
    // to merge both lists
    Node merge(Node head1,Node head2)
    {
        Node head=null;
        if(head1==null)
        return head2;
        
        if(head2==null)
        return head1;
        
        if(head1.data<=head2.data)
        {
            head=head1;
            head1=head1.next;
            
        }
        else
        {
            head=head2;
            head2=head2.next;
        }
        Node prev=head;
        while(true)
        {
            if(head1==null)
            {
                prev.next=head2;
                return head;
            }
            if(head2==null)
            {
                prev.next=head1;
                return head;
            }
            if(head1.data<=head2.data)
            {
                prev.next=head1;
                head1=head1.next;
            }
            else
            {
                prev.next=head2;
                head2=head2.next;
            }
            prev=prev.next;
        }
    }
    // finding mid point of linked list
    Node midPoint(Node head)
    {
        if(head==null)
        {
            return head;
        }
        Node slow=head;
        Node fast=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    //Function to sort the given linked list using Merge Sort.
    Node mergeSort(Node head)
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        Node mid=midPoint(head);
        Node head2=mergeSort(mid.next);
        mid.next=null;
        Node head1=mergeSort(head);
        Node newhead=merge(head1,head2);
        return newhead;
        // add your code here
    }
}
